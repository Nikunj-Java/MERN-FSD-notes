Topics To Be Covered:
***********************************************************************************
1. Enhance Objects Literals
2. Null Coalescing
3. Optional Chaining
4. Symbols
5. Generators and Iterators
6. Getter and Setters of Objects
7. Bind, Call and Apply
***********************************************************************************

1. Enhance Object Literals
----------------------------------
- when we create objects ,it is neccessory to enhance it 
- we can use group variables from global scope
- we can create them as simple JS Object
- we can enhance the object by Below Methods

    A. PROPERTY SORTHAND:
    ------------------------------
    When the property name and variable name are used to define a same property then we can use this sorthand property

    how?


    const name="Alex";
    const age= 35;


    const user= {name,age}; //sorthand property

    console.log(user.name);
    console.log(user.age);

    Rather than using like this  we can use below Syntax

    const user={name:name,age:age}

     B. COMPUTED PROPERTY NAMES:
    ------------------------------
    We can use [] to define object's properties dynamically base on its variables and expressions

    HOW??

    const propertyName= 'color';
    const car={
        [propertyName]:'blue'
    }

    console.log("ComputedProperty:",car.color);

    C. METHOD DEFINATION
    ------------------------------
    WE can simply Define a method inside an object

    const calculator= {
        add(a,b){return a+b;}
        sub(a,b){return a-b;}
    }

    console.log("Addition",calculator.add(3,2));
    console.log("Subtaction",calculator.sub(3,2));

    D. WRAPPING METHOD AND VARIABLES IN Object
    --------------------------------------------

        const car1={
            //variable declaration
            carName:"Tata NEXON",
            color:"Dark Edition",
            Model:"Top Model",

            //Function Declaration
            start(){
                console.log(`${this.carName} started`);
            },

            stop(){
                console.log(`${this.carName} stopped`);
            }
        }

        console.log(car1.carName);
        console.log(car1.color);
        console.log(car1.Model);
        car1.start();
        car1.stop();

**********************************************************************************

2. Nullish Coalescing operator
-------------------------------


?? called as nullish coalescing operator.

- It allows you  to provide a default value when the variable is null or undefined
- it returns the left side value if its not null or undefined , if its null or undefined then return
  the operators right hand side value


  function check(value){
        const defaultValue='Default';

        const result=value ?? defaultValue;

        return result;
    }

    console.log(check('Hello'));
    console.log(check(null));
    console.log(check(undefined));
    console.log("Result",check(""));
    console.log("Result",check(0));
    console.log("Result",check(false));


    ************** Logical OR *******************
    function check(value){
        const defaultValue='Default';

        const result=value || defaultValue;

        return result;
    }

    console.log(check('Hello'));
    console.log(check(null));
    console.log(check(undefined));
    console.log("Result",check(""));
    console.log("Result",check(0));
    console.log("Result",check(false));

    ___________________________________________________________________________

    Summary: To do error handling for null and undefined use ??
             To do error handling with " ",0 or false then use || (Logical OR)

    ____________________________________________________________________________

3. OPTIONAL Chaining
*********************************************************************************

?. operator is called as optional chaining operator
- It allows you  to access the value of a property located at particular location, if not available at that location it will return you the  undefined
- if one of the reference in the chain is null / undefined the from that location only it will return undefined.
- it prevent errors when we are trying to get some nested object values using chaining operator


const person={
    name:"alex",
    address:{
        city:"new york",
        street:"xyz Main st."
    },
    phonebook:{
        personal:"1234567890",
        home:"9876543210"
    }
}

console.log(person?.address?.city);
console.log(person?.phonebook?.personal);

const person1={
    name:"Jhon",
    address:{
        city:"Mumbai",
        street:"ABC Main st."
    }
    
}

console.log(person1?.address?.city);
console.log(person1?.phonebook?.personal);

***********************************************************************************
4. Symbols
***********************************************************************************

- IT IS PREMITIVE DATA TYPE WHICH IS INTRIDUCED IN ES6.
- THEY ARE UNIUQE AND IMMUTABLE VALUES WHICH WE CAN USE AS PROPERTY KEYS IN Object

USE:
--------
- WE CAN USE THEM TO DEFINE AND ACCESS THE OBJECT PROPERTIES WHICH ARE INTENDED TO BE PRIVATE OR HAVING SOME ANOTHER SPECIAL MEANING

HOW TO USE??



const symbol=Symbol();
const obj={};

obj[symbol]="This is My Symbol Property";

console.log(obj[symbol]);

//create in another way

const symbol1= Symbol('Symbol with its description');
const symbol2= Symbol('Symbol with its description');

console.log(symbol1.toString());
console.log(symbol1==symbol2); //unique symbol











 